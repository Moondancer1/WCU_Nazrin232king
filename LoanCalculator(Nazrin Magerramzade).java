import java.util.*;
import java.io.*;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.text.DecimalFormat;


 */
public class LoanCalculator {
    

    private static final int MIN_SALARY_USD = 500;
    private static final double USD_TO_AZN = 1.70;
    private static final int[] STANDARD_TERMS = {3, 6, 9, 12, 24, 36};
    private static final double MIN_RATE = 11.0;
    private static final double MAX_RATE = 14.0;
    private static final double MAX_PAYMENT_RATIO = 10.0;
    

    private List<Borrower> borrowers;
    private Scanner scanner;
    private DecimalFormat currencyFormat;
    private DecimalFormat percentFormat;
    

    static class Borrower {
        public String firstName;
        public String lastName;
        public String maritalStatus;
        public double salaryUsd;
        public double salaryAzn;
        public int familyMembers;
        public String fullName;
        
        public Borrower(String firstName, String lastName, String maritalStatus, 
                       double salaryUsd, int familyMembers) {
            this.firstName = firstName;
            this.lastName = lastName;
            this.maritalStatus = maritalStatus;
            this.salaryUsd = salaryUsd;
            this.salaryAzn = salaryUsd * USD_TO_AZN;
            this.familyMembers = familyMembers;
            this.fullName = firstName + " " + lastName;
        }
    }
    
  
    static class LoanParams {
        public double amount;
        public double rate;
        public int months;
        public double years;
        public double maxAllowed;
        
        public LoanParams(double amount, double rate, int months, double maxAllowed) {
            this.amount = amount;
            this.rate = rate;
            this.months = months;
            this.years = months / 12.0;
            this.maxAllowed = maxAllowed;
        }
    }
    
    
    static class Payment {
        public int month;
        public String date;
        public double monthlyPayment;
        public double principal;
        public double interest;
        public double balance;
        
        public Payment(int month, String date, double monthlyPayment, 
                      double principal, double interest, double balance) {
            this.month = month;
            this.date = date;
            this.monthlyPayment = monthlyPayment;
            this.principal = principal;
            this.interest = interest;
            this.balance = balance;
        }
    }
    

    static class AffordabilityAnalysis {
        public double totalIncome;
        public double monthlyPayment;
        public double paymentRatio;
        public double remainingIncome;
        public String status;
        public String recommendation;
        
        public AffordabilityAnalysis(double totalIncome, double monthlyPayment, 
                                   double paymentRatio, double remainingIncome, 
                                   String status, String recommendation) {
            this.totalIncome = totalIncome;
            this.monthlyPayment = monthlyPayment;
            this.paymentRatio = paymentRatio;
            this.remainingIncome = remainingIncome;
            this.status = status;
            this.recommendation = recommendation;
        }
    }
    

    public LoanCalculator() {
        this.borrowers = new ArrayList<>();
        this.scanner = new Scanner(System.in);
        this.currencyFormat = new DecimalFormat("#,##0.00");
        this.percentFormat = new DecimalFormat("0.0");
    }
    
 
    private void clearScreen() {
        try {
            String os = System.getProperty("os.name").toLowerCase();
            if (os.contains("windows")) {
                new ProcessBuilder("cmd", "/c", "cls").inheritIO().start().waitFor();
            } else {
                new ProcessBuilder("clear").inheritIO().start().waitFor();
            }
        } catch (Exception e) {
          
            for (int i = 0; i < 50; i++) {
                System.out.println();
            }
        }
    }
    
   
    private void printHeader(String title) {
        System.out.println("=".repeat(75));
        System.out.println("  " + title);
        System.out.println("=".repeat(75));
    }
    

    private double calculateInterestRate(int months) {
        if (months <= 3) {
            return MAX_RATE;
        } else if (months >= 36) {
            return MIN_RATE; 
        } else {
            
            double rate = MAX_RATE - ((MAX_RATE - MIN_RATE) * (months - 3) / (36 - 3));
            return Math.round(rate * 10.0) / 10.0;
        }
    }
    
    
    private double calculateMaxLoanAmount(double monthlyIncome, double annualRate, int loanTermMonths) {
        double maxMonthlyPayment = monthlyIncome * (MAX_PAYMENT_RATIO / 100);
        
        if (annualRate == 0) {
            return maxMonthlyPayment * loanTermMonths;
        }
        
        double monthlyRate = annualRate / 100 / 12;
        double maxLoan = maxMonthlyPayment * (Math.pow(1 + monthlyRate, loanTermMonths) - 1) /
                        (monthlyRate * Math.pow(1 + monthlyRate, loanTermMonths));
        return maxLoan;
    }
    
    
    private String getMaritalStatus() {
        System.out.println("\n –°–ï–ú–ï–ô–ù–û–ï –ü–û–õ–û–ñ–ï–ù–ò–ï:");
        System.out.println("1. –•–æ–ª–æ—Å—Ç/–ù–µ –∑–∞–º—É–∂–µ–º");
        System.out.println("2. –ñ–µ–Ω–∞—Ç/–ó–∞–º—É–∂–µ–º");
        System.out.println("3. –†–∞–∑–≤–µ–¥–µ–Ω/–†–∞–∑–≤–µ–¥–µ–Ω–∞");
        System.out.println("4. –í–¥–æ–≤–µ—Ü/–í–¥–æ–≤–∞");
        System.out.println("5. –ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –±—Ä–∞–∫");
        
        while (true) {
            try {
                System.out.print("–í—ã–±–µ—Ä–∏—Ç–µ (1-5): ");
                int choice = Integer.parseInt(scanner.nextLine().trim());
                switch (choice) {
                    case 1: return "–•–æ–ª–æ—Å—Ç/–ù–µ –∑–∞–º—É–∂–µ–º";
                    case 2: return "–ñ–µ–Ω–∞—Ç/–ó–∞–º—É–∂–µ–º";
                    case 3: return "–†–∞–∑–≤–µ–¥–µ–Ω/–†–∞–∑–≤–µ–¥–µ–Ω–∞";
                    case 4: return "–í–¥–æ–≤–µ—Ü/–í–¥–æ–≤–∞";
                    case 5: return "–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –±—Ä–∞–∫";
                    default: System.out.println(" –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç 1 –¥–æ 5!");
                }
            } catch (NumberFormatException e) {
                System.out.println(" –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!");
            }
        }
    }
    
   
    private Borrower inputBorrowerData() {
        System.out.println("\nüìù –í–í–û–î –î–ê–ù–ù–´–• –ó–ê–ï–ú–©–ò–ö–ê");
        System.out.println("-".repeat(35));
        
  
        String firstName;
        while (true) {
            System.out.print("–í–≤–µ–¥–∏—Ç–µ –∏–º—è: ");
            firstName = scanner.nextLine().trim();
            if (!firstName.isEmpty()) break;
            System.out.println(" –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!");
        }
        
        
        String lastName;
        while (true) {
            System.out.print("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é: ");
            lastName = scanner.nextLine().trim();
            if (!lastName.isEmpty()) break;
            System.out.println(" –§–∞–º–∏–ª–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π!");
        }
        
        
        String maritalStatus = getMaritalStatus();
        
        
        double salaryUsd;
        while (true) {
            try {
                System.out.print("\n–í–≤–µ–¥–∏—Ç–µ –∑–∞—Ä–ø–ª–∞—Ç—É (–≤ –¥–æ–ª–ª–∞—Ä–∞—Ö –°–®–ê): $");
                salaryUsd = Double.parseDouble(scanner.nextLine().trim());
                
                if (salaryUsd < 0) {
                    System.out.println(" –ó–∞—Ä–ø–ª–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π!");
                    continue;
                }
                
                if (salaryUsd < MIN_SALARY_USD) {
                    System.out.println("\n –ù–ï–î–û–°–¢–ê–¢–û–ß–ù–´–ô –î–û–•–û–î!");
                    System.out.println("   –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: $" + MIN_SALARY_USD);
                    System.out.println("   –í–∞—à–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞: $" + salaryUsd);
                    System.out.println("   –ù–µ–¥–æ—Å—Ç–∞–µ—Ç: $" + (MIN_SALARY_USD - salaryUsd));
                    System.out.println("\n–í–∞—Ä–∏–∞–Ω—Ç—ã:");
                    System.out.println("1. –í–≤–µ—Å—Ç–∏ –∑–∞—Ä–ø–ª–∞—Ç—É –∑–∞–Ω–æ–≤–æ");
                    System.out.println("2. –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω–æ–≥–æ –∑–∞–µ–º—â–∏–∫–∞ –ø–æ–∑–∂–µ");
                    System.out.println("3. –í—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã");
                    
                    System.out.print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1/2/3): ");
                    String choice = scanner.nextLine().trim();
                    
                    switch (choice) {
                        case "1":
                            continue; 
                        case "2":
                            System.out.println(" –ó–∞–ø–æ–º–Ω–∏—Ç–µ: –æ–±—â–∏–π –¥–æ—Ö–æ–¥ –≤—Å–µ—Ö –∑–∞–µ–º—â–∏–∫–æ–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º!");
                            break; 
                        case "3":
                            System.out.println("\n –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!");
                            return null;
                        default:
                            System.out.println(" –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑");
                            continue;
                    }
                }
                break;
            } catch (NumberFormatException e) {
                System.out.println(" –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)!");
            }
        }
        
      
        int familyMembers;
        while (true) {
            try {
                System.out.print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏: ");
                familyMembers = Integer.parseInt(scanner.nextLine().trim());
                if (familyMembers < 1) {
                    System.out.println(" –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!");
                    continue;
                }
                if (familyMembers > 20) {
                    System.out.println(" –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è —Å–µ–º—å—è! –ú–∞–∫—Å–∏–º—É–º 20 —á–µ–ª–æ–≤–µ–∫.");
                    continue;
                }
                break;
            } catch (NumberFormatException e) {
                System.out.println(" –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!");
            }
        }
        
        Borrower borrower = new Borrower(firstName, lastName, maritalStatus, salaryUsd, familyMembers);
        borrowers.add(borrower);
        
        System.out.println("\n –ó–∞–µ–º—â–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω:");
        System.out.println("    " + borrower.fullName);
        System.out.println("    –°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ: " + maritalStatus);
        System.out.println("    –ó–∞—Ä–ø–ª–∞—Ç–∞: $" + salaryUsd + " (‚âà" + currencyFormat.format(borrower.salaryAzn) + " AZN)");
        System.out.println("    –°–µ–º—å—è: " + familyMembers + " —á–µ–ª–æ–≤–µ–∫");
        
        return borrower;
    }
    
  
    private boolean checkTotalIncomeRequirement() {
        double totalUsd = borrowers.stream().mapToDouble(b -> b.salaryUsd).sum();
        double totalAzn = borrowers.stream().mapToDouble(b -> b.salaryAzn).sum();
        
        if (totalUsd < MIN_SALARY_USD) {
            System.out.println("\n –û–¢–ö–ê–ó –í –ö–†–ï–î–ò–¢–ï!");
            System.out.println("   –û–±—â–∏–π –¥–æ—Ö–æ–¥ –≤—Å–µ—Ö –∑–∞–µ–º—â–∏–∫–æ–≤: $" + currencyFormat.format(totalUsd) + 
                             " (‚âà" + currencyFormat.format(totalAzn) + " AZN)");
            System.out.println("   –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç—Ä–µ–±—É–µ–º—ã–π –¥–æ—Ö–æ–¥: $" + MIN_SALARY_USD);
            System.out.println("   –ù–µ–¥–æ—Å—Ç–∞–µ—Ç: $" + currencyFormat.format(MIN_SALARY_USD - totalUsd));
            System.out.println("\n –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:");
            System.out.println("   - –î–æ–±–∞–≤—å—Ç–µ –µ—â–µ –æ–¥–Ω–æ–≥–æ –∑–∞–µ–º—â–∏–∫–∞");
            System.out.println("   - –£–≤–µ–ª–∏—á—å—Ç–µ –¥–æ—Ö–æ–¥—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–µ–º—â–∏–∫–æ–≤");
            System.out.println("   - –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –±–∞–Ω–∫ –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è");
            
            System.out.println("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã...");
            scanner.nextLine();
            return false;
        }
        
        return true;
    }
    

    private void showMaxLoanRecommendations() {
        double totalIncome = calculateTotalIncome();
        double maxMonthlyPayment = totalIncome * (MAX_PAYMENT_RATIO / 100);
        
        System.out.println("\n –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ô –°–£–ú–ú–ï –ö–†–ï–î–ò–¢–ê:");
        System.out.println("   –í–∞—à –¥–æ—Ö–æ–¥: " + currencyFormat.format(totalIncome) + " AZN/–º–µ—Å—è—Ü");
        System.out.println("   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂ (10%): " + currencyFormat.format(maxMonthlyPayment) + " AZN/–º–µ—Å—è—Ü");
        System.out.println("-".repeat(60));
        
        for (int months : STANDARD_TERMS) {
            double rate = calculateInterestRate(months);
            double maxLoan = calculateMaxLoanAmount(totalIncome, rate, months);
            String periodText = months < 12 ? months + " –º–µ—Å." : months + " –º–µ—Å. (" + (months/12) + "–≥.)";
            System.out.printf("   %12s (%4.1f%%): –¥–æ %8s AZN%n", 
                            periodText, rate, currencyFormat.format(maxLoan));
        }
    }
    
    
    private void printRateTable() {
        System.out.println("\n –¢–ê–ë–õ–ò–¶–ê –ü–†–û–¶–ï–ù–¢–ù–´–• –°–¢–ê–í–û–ö:");
        System.out.println("-".repeat(45));
        System.out.printf("%-10s %12s %s%n", "–°—Ä–æ–∫", "–°—Ç–∞–≤–∫–∞", "–û–ø–∏—Å–∞–Ω–∏–µ");
        System.out.println("-".repeat(45));
        
        for (int months : STANDARD_TERMS) {
            double rate = calculateInterestRate(months);
            String periodText = months < 12 ? months + " –º–µ—Å." : 
                              (months % 12 == 0 ? (months/12) + " –≥–æ–¥–∞" : months + " –º–µ—Å.");
            String description = months <= 6 ? "–ö–æ—Ä–æ—Ç–∫–∏–π —Å—Ä–æ–∫" : 
                               months <= 18 ? "–°—Ä–µ–¥–Ω–∏–π —Å—Ä–æ–∫" : "–î–ª–∏–Ω–Ω—ã–π —Å—Ä–æ–∫";
            
            System.out.printf("%-10s %10.1f%% %s%n", periodText, rate, description);
        }
        
        System.out.printf("%-10s %12s %s%n", "–°–≤–æ–π —Å—Ä–æ–∫", "11-14%", "–ó–∞–≤–∏—Å–∏—Ç –æ—Ç —Å—Ä–æ–∫–∞");
        System.out.println("-".repeat(45));
        System.out.println(" –ß–µ–º –±–æ–ª—å—à–µ —Å—Ä–æ–∫, —Ç–µ–º –º–µ–Ω—å—à–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞");
    }
    
   
    private int[] getLoanTerm() {
        System.out.println("\n –í–´–ë–û–† –°–†–û–ö–ê –ö–†–ï–î–ò–¢–ê:");
        
        
        printRateTable();
        showMaxLoanRecommendations();
        
        System.out.println("\n–í–∞—Ä–∏–∞–Ω—Ç—ã:");
        for (int i = 0; i < STANDARD_TERMS.length; i++) {
            int term = STANDARD_TERMS[i];
            double rate = calculateInterestRate(term);
            String periodText = term < 12 ? term + " –º–µ—Å—è—Ü–µ–≤" : 
                              term + " –º–µ—Å—è—Ü–µ–≤ (" + (term/12.0) + " –≥–æ–¥–∞)";
            System.out.println((i+1) + ". " + periodText + " - " + percentFormat.format(rate) + "% –≥–æ–¥–æ–≤—ã—Ö");
        }
        
        System.out.println((STANDARD_TERMS.length + 1) + ". –£–∫–∞–∑–∞—Ç—å —Å–≤–æ–π —Å—Ä–æ–∫ (1-60 –º–µ—Å—è—Ü–µ–≤)");
        
        while (true) {
            try {
                System.out.print("\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç (1-" + (STANDARD_TERMS.length + 1) + "): ");
                int choice = Integer.parseInt(scanner.nextLine().trim());
                
                if (choice >= 1 && choice <= STANDARD_TERMS.length) {
                    int selectedTerm = STANDARD_TERMS[choice - 1];
                    double selectedRate = calculateInterestRate(selectedTerm);
                    System.out.println(" –í—ã–±—Ä–∞–Ω —Å—Ä–æ–∫: " + selectedTerm + " –º–µ—Å—è—Ü–µ–≤");
                    System.out.println(" –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞: " + percentFormat.format(selectedRate) + "% –≥–æ–¥–æ–≤—ã—Ö");
                    return new int[]{selectedTerm, (int)(selectedRate * 10)}; 
                } else if (choice == STANDARD_TERMS.length + 1) {
              
                    while (true) {
                        try {
                            System.out.print("–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –≤ –º–µ—Å—è—Ü–∞—Ö (1-60): ");
                            int customMonths = Integer.parseInt(scanner.nextLine().trim());
                            if (customMonths < 1 || customMonths > 60) {
                                System.out.println(" –°—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 60 –º–µ—Å—è—Ü–µ–≤!");
                                continue;
                            }
                            
                            double customRate = calculateInterestRate(customMonths);
                            System.out.println(" –í—ã–±—Ä–∞–Ω —Å—Ä–æ–∫: " + customMonths + " –º–µ—Å—è—Ü–µ–≤");
                            System.out.println(" –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞: " + percentFormat.format(customRate) + "% –≥–æ–¥–æ–≤—ã—Ö");
                            return new int[]{customMonths, (int)(customRate * 10)};
                        } catch (NumberFormatException e) {
                            System.out.println(" –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –º–µ—Å—è—Ü–µ–≤!");
                        }
                    }
                } else {
                    System.out.println(" –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç 1 –¥–æ " + (STANDARD_TERMS.length + 1) + "!");
                }
            } catch (NumberFormatException e) {
                System.out.println(" –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!");
            }
        }
    }
    
    
    private LoanParams inputLoanParameters() {
        System.out.println("\n –ü–ê–†–ê–ú–ï–¢–†–´ –ö–†–ï–î–ò–¢–ê");
        System.out.println("-".repeat(30));
        
        
        int[] loanTermData = getLoanTerm();
        int loanTermMonths = loanTermData[0];
        double annualRate = loanTermData[1] / 10.0;
        
      
        double totalIncome = calculateTotalIncome();
        double maxLoanAmount = calculateMaxLoanAmount(totalIncome, annualRate, loanTermMonths);
        
        System.out.println("\n –ü—Ä–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Å—Ä–æ–∫–µ (" + loanTermMonths + " –º–µ—Å., " + 
                          percentFormat.format(annualRate) + "%%):");
        System.out.println("   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞: " + currencyFormat.format(maxLoanAmount) + " AZN");
        System.out.println("   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂: " + currencyFormat.format(totalIncome * 0.1) + 
                          " AZN/–º–µ—Å—è—Ü (10% –æ—Ç –¥–æ—Ö–æ–¥–∞)");
        
        
        while (true) {
            try {
                System.out.print("\n–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Å—É–º–º—É –∫—Ä–µ–¥–∏—Ç–∞ (–Ω–µ –±–æ–ª–µ–µ " + 
                               currencyFormat.format(maxLoanAmount) + " AZN): ");
                double loanAmount = Double.parseDouble(scanner.nextLine().trim());
                
                if (loanAmount <= 0) {
                    System.out.println(" –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!");
                    continue;
                }
                
                if (loanAmount > maxLoanAmount) {
                    System.out.println("\n –û–¢–ö–ê–ó –í –ö–†–ï–î–ò–¢–ï!");
                    System.out.println("   –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–∞—è —Å—É–º–º–∞: " + currencyFormat.format(loanAmount) + " AZN");
                    System.out.println("   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–∞—è: " + currencyFormat.format(maxLoanAmount) + " AZN");
                    System.out.println("   –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ: " + currencyFormat.format(loanAmount - maxLoanAmount) + " AZN");
                    System.out.println("\n –ü—Ä–∏ –¥–∞–Ω–Ω–æ–π —Å—É–º–º–µ –∫—Ä–µ–¥–∏—Ç–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–≤—ã—Å–∏—Ç 10%!");
                    
                    System.out.println("\n–í–∞—Ä–∏–∞–Ω—Ç—ã:");
                    System.out.println("1. –í–≤–µ—Å—Ç–∏ —Å—É–º–º—É –∑–∞–Ω–æ–≤–æ");
                    System.out.println("2. –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Å—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞");
                    System.out.println("3. –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É");
                    
                    System.out.print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1/2/3): ");
                    String choice = scanner.nextLine().trim();
                    switch (choice) {
                        case "1":
                            continue;
                        case "2":
                            
                            loanTermData = getLoanTerm();
                            loanTermMonths = loanTermData[0];
                            annualRate = loanTermData[1] / 10.0;
                            maxLoanAmount = calculateMaxLoanAmount(totalIncome, annualRate, loanTermMonths);
                            System.out.println("\n –ü—Ä–∏ –Ω–æ–≤–æ–º —Å—Ä–æ–∫–µ (" + loanTermMonths + " –º–µ—Å., " + 
                                             percentFormat.format(annualRate) + "%%):");
                            System.out.println("   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞: " + 
                                             currencyFormat.format(maxLoanAmount) + " AZN");
                            continue;
                        case "3":
                            System.out.println("\n –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!");
                            return null;
                        default:
                            System.out.println(" –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!");
                            continue;
                    }
                }
                
                return new LoanParams(loanAmount, annualRate, loanTermMonths, maxLoanAmount);
            } catch (NumberFormatException e) {
                System.out.println(" –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É!");
            }
        }
    }
    
   
    private double calculateTotalIncome() {
        return borrowers.stream().mapToDouble(b -> b.salaryAzn).sum();
    }
    
    
    private double calculateMonthlyPayment(double loanAmount, double annualRate, int loanTermMonths) {
        if (annualRate == 0) {
            return loanAmount / loanTermMonths;
        }
        
        double monthlyRate = annualRate / 100 / 12;
        double payment = loanAmount * (monthlyRate * Math.pow(1 + monthlyRate, loanTermMonths)) /
                        (Math.pow(1 + monthlyRate, loanTermMonths) - 1);
        return payment;
    }
    
    
    private List<Payment> generatePaymentSchedule(double loanAmount, double annualRate, int loanTermMonths) {
        double monthlyPayment = calculateMonthlyPayment(loanAmount, annualRate, loanTermMonths);
        double monthlyRate = annualRate / 100 / 12;
        
        List<Payment> schedule = new ArrayList<>();
        double remainingBalance = loanAmount;
        LocalDate startDate = LocalDate.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
        
        for (int month = 1; month <= loanTermMonths; month++) {
            LocalDate paymentDate = startDate.plusMonths(month - 1);
            
            double interestPayment = remainingBalance * monthlyRate;
            double principalPayment = monthlyPayment - interestPayment;
            remainingBalance -= principalPayment;
            
            
            if (month == loanTermMonths && remainingBalance != 0) {
                principalPayment += remainingBalance;
                monthlyPayment = interestPayment + principalPayment;
                remainingBalance = 0;
            }
            
            schedule.add(new Payment(
                month,
                paymentDate.format(formatter),
                Math.round(monthlyPayment * 100.0) / 100.0,
                Math.round(principalPayment * 100.0) / 100.0,
                Math.round(interestPayment * 100.0) / 100.0,
                Math.round(Math.max(0, remainingBalance) * 100.0) / 100.0
            ));
        }
        
        return schedule;
    }
    
    
    private AffordabilityAnalysis analyzeAffordability(double monthlyPayment) {
        double totalIncome = calculateTotalIncome();
        if (totalIncome == 0) {
            return null;
        }
        
        double paymentRatio = (monthlyPayment / totalIncome) * 100;
        
        
        long marriedCount = borrowers.stream()
            .filter(b -> b.maritalStatus.contains("–ñ–µ–Ω–∞—Ç") || b.maritalStatus.contains("–ó–∞–º—É–∂–µ–º"))
            .count();
        String familyBonus = marriedCount > 0 ? 
            " –°–µ–º–µ–π–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å." : "";
        
        String status = " –ö–†–ï–î–ò–¢ –û–î–û–ë–†–ï–ù";
        String recommendation = "–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ " + percentFormat.format(paymentRatio) + 
                              "% - –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –ª–∏–º–∏—Ç–∞ 10%." + familyBonus;
        
        return new AffordabilityAnalysis(
            totalIncome,
            monthlyPayment,
            paymentRatio,
            totalIncome - monthlyPayment,
            status,
            recommendation
        );
    }
    
    
    private void printBorrowersAnalysis(double monthlyPayment) {
        double totalIncome = calculateTotalIncome();
        
        System.out.println("\nüë• –ê–ù–ê–õ–ò–ó –ù–ê–ì–†–£–ó–ö–ò –ü–û –ó–ê–ï–ú–©–ò–ö–ê–ú:");
        System.out.println("-".repeat(65));
        
        for (int i = 0; i < borrowers.size(); i++) {
            Borrower borrower = borrowers.get(i);
            double share = borrower.salaryAzn / totalIncome;
            double borrowerPayment = monthlyPayment * share;
            double borrowerRatio = (borrowerPayment / borrower.salaryAzn) * 100;
            double remaining = borrower.salaryAzn - borrowerPayment;
            
            System.out.println("\n" + (i+1) + ". " + borrower.fullName);
            System.out.println("    –°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ: " + borrower.maritalStatus);
            System.out.println("    –ó–∞—Ä–ø–ª–∞—Ç–∞: $" + borrower.salaryUsd + 
                             " (" + currencyFormat.format(borrower.salaryAzn) + " AZN)");
            System.out.println("    –î–æ–ª—è –≤ —Å–µ–º–µ–π–Ω–æ–º –¥–æ—Ö–æ–¥–µ: " + percentFormat.format(share * 100) + "%");
            System.out.println("    –î–æ–ª—è –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: " + currencyFormat.format(borrowerPayment) + " AZN");
            System.out.println("    –ù–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –¥–æ—Ö–æ–¥: " + percentFormat.format(borrowerRatio) + "%");
            System.out.println("    –û—Å—Ç–∞—Ç–æ–∫ –ø–æ—Å–ª–µ –ø–ª–∞—Ç–µ–∂–∞: " + currencyFormat.format(remaining) + 
                             " AZN (90%+ –¥–æ—Ö–æ–¥–∞)");
        }
    }
    

    private void printPaymentTable(List<Payment> schedule, int startMonth, int count) {
        int endMonth = Math.min(startMonth + count - 1, schedule.size());
        
        System.out.println("\n –ì–†–ê–§–ò–ö –ü–õ–ê–¢–ï–ñ–ï–ô (–º–µ—Å—è—Ü—ã " + startMonth + "-" + endMonth + "):");
        System.out.println("-".repeat(85));
        System.out.printf("%3s %12s %15s %15s %12s %15s%n", 
                         "‚Ññ", "–î–∞—Ç–∞", "–ü–ª–∞—Ç–µ–∂ (AZN)", "–û—Å–Ω–æ–≤–Ω–æ–π –¥–æ–ª–≥", "–ü—Ä–æ—Ü–µ–Ω—Ç—ã", "–û—Å—Ç–∞—Ç–æ–∫");
        System.out.println("-".repeat(85));
        
        for (int i = startMonth - 1; i < endMonth; i++) {
            Payment payment = schedule.get(i);
            System.out.printf("%3d %12s %15s %15s %12s %15s%n",
                             payment.month,
                             payment.date,
                             currencyFormat.format(payment.monthlyPayment),
                             currencyFormat.format(payment.principal),
                             currencyFormat.format(payment.interest),
                             currencyFormat.format(payment.balance));
        }
    }
    
    
    private void printFamilySummary() {
        System.out.println("\n –°–ï–ú–ï–ô–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:");
        System.out.println("-".repeat(40));
        
        int totalFamilyMembers = borrowers.stream().mapToInt(b -> b.familyMembers).sum();
        long marriedCount = borrowers.stream()
            .filter(b -> b.maritalStatus.contains("–ñ–µ–Ω–∞—Ç") || b.maritalStatus.contains("–ó–∞–º—É–∂–µ–º"))
            .count();
        
        System.out.println("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–ª–µ–Ω–æ–≤ —Å–µ–º—å–∏: " + totalFamilyMembers);
        System.out.println("–ó–∞–µ–º—â–∏–∫–æ–≤ –≤ –±—Ä–∞–∫–µ: " + marriedCount + " –∏–∑ " + borrowers.size());
        
        if (marriedCount > 0) {
            System.out.println(" –°–µ–º–µ–π–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ–≤—ã—à–∞–µ—Ç –∫—Ä–µ–¥–∏—Ç–Ω—É—é –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å");
        }
        
      
        Map<String, Integer> statusCount = new HashMap<>();
        for (Borrower borrower : borrowers) {
            statusCount.put(borrower.maritalStatus, 
                           statusCount.getOrDefault(borrower.maritalStatus, 0) + 1);
        }
        
        System.out.println("\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–µ–º–µ–π–Ω–æ–º—É –ø–æ–ª–æ–∂–µ–Ω–∏—é:");
        for (Map.Entry<String, Integer> entry : statusCount.entrySet()) {
            System.out.println("- " + entry.getKey() + ": " + entry.getValue() + " —á–µ–ª.");
        }
    }
    
    
    private void printFinancialSafety(AffordabilityAnalysis analysis) {
        System.out.println("\n –§–ò–ù–ê–ù–°–û–í–ê–Ø –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨:");
        System.out.println("-".repeat(50));
        double remainingPercentage = 100 - analysis.paymentRatio;
        System.out.println("–û—Å—Ç–∞–µ—Ç—Å—è –æ—Ç –¥–æ—Ö–æ–¥–∞: " + percentFormat.format(remainingPercentage) + 
                          "% (" + currencyFormat.format(analysis.remainingIncome) + " AZN)");
        System.out.println("–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: " + percentFormat.format(analysis.paymentRatio) + 
                          "% (–ª–∏–º–∏—Ç: " + percentFormat.format(MAX_PAYMENT_RATIO) + "%)");
        System.out.println("–ó–∞–ø–∞—Å –¥–æ –ª–∏–º–∏—Ç–∞: " + 
                          percentFormat.format(MAX_PAYMENT_RATIO - analysis.paymentRatio) + "%");
        
        if (remainingPercentage >= 90) {
            System.out.println(" –û—Ç–ª–∏—á–Ω–∞—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å");
        } else if (remainingPercentage >= 85) {
            System.out.println(" –•–æ—Ä–æ—à–∞—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å");
        } else {
            System.out.println(" –£–º–µ—Ä–µ–Ω–Ω–∞—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å");
        }
    }
    
   
    private void saveToFile(LoanParams loanParams, List<Payment> schedule, 
                           AffordabilityAnalysis analysis, double monthlyPayment) {
        try (PrintWriter writer = new PrintWriter(new FileWriter("loan_approved_azn_v3_java.txt", 
                                                  StandardCharsets.UTF_8))) {
            writer.println("–û–î–û–ë–†–ï–ù–ù–´–ô –ö–†–ï–î–ò–¢ - –ì–†–ê–§–ò–ö –ü–õ–ê–¢–ï–ñ–ï–ô (–ê–ó–ï–†–ë–ê–ô–î–ñ–ê–ù) v3.0 Java Edition");
            writer.println("=".repeat(75));
            writer.println();
            writer.println("–°–¢–ê–¢–£–°: –ö–†–ï–î–ò–¢ –û–î–û–ë–†–ï–ù!");
            writer.println("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫—Ä–µ–¥–∏—Ç–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: " + percentFormat.format(MAX_PAYMENT_RATIO) + "%");
            writer.println();
            
            writer.println("–ó–∞–µ–º—â–∏–∫–∏:");
            for (Borrower borrower : borrowers) {
                writer.println("- " + borrower.fullName + ": $" + borrower.salaryUsd + 
                             " (" + currencyFormat.format(borrower.salaryAzn) + " AZN)");
                writer.println("  –°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ: " + borrower.maritalStatus);
                writer.println("  –°–µ–º—å—è: " + borrower.familyMembers + " —á–µ–ª–æ–≤–µ–∫");
                writer.println();
            }
            
            writer.println("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫—Ä–µ–¥–∏—Ç–∞:");
            writer.println("- –°—É–º–º–∞: " + currencyFormat.format(loanParams.amount) + " AZN");
            writer.println("- –°—Ç–∞–≤–∫–∞: " + percentFormat.format(loanParams.rate) + "% (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å—Ä–æ–∫–∞)");
            writer.println("- –°—Ä–æ–∫: " + loanParams.months + " –º–µ—Å—è—Ü–µ–≤");
            writer.println("- –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂: " + currencyFormat.format(monthlyPayment) + " AZN");
            writer.println("- –ö—Ä–µ–¥–∏—Ç–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: " + percentFormat.format(analysis.paymentRatio) + "%");
            writer.println();
            
            writer.println("–ú–ï–°–Ø–¶\t–î–ê–¢–ê\t\t–ü–õ–ê–¢–ï–ñ (AZN)\t–û–°–ù–û–í–ù–û–ô –î–û–õ–ì\t–ü–†–û–¶–ï–ù–¢–´\t–û–°–¢–ê–¢–û–ö");
            writer.println("-".repeat(80));
            for (Payment payment : schedule) {
                writer.printf("%d\t%s\t%.2f\t\t%.2f\t%.2f\t%.2f%n",
                             payment.month, payment.date, payment.monthlyPayment,
                             payment.principal, payment.interest, payment.balance);
            }
            
            System.out.println("\n –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: loan_approved_azn_v3_java.txt");
        } catch (IOException e) {
            System.out.println("\n –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: " + e.getMessage());
        }
    }
    
 
    public void run() {
        try {
            clearScreen();
            printHeader("–ö–†–ï–î–ò–¢–ù–´–ô –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† (–ê–ó–ï–†–ë–ê–ô–î–ñ–ê–ù) v3.0 Java Edition");
            
            System.out.println("\n –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: $" + MIN_SALARY_USD);
            System.out.println(" –ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞: " + USD_TO_AZN + " AZN");
            System.out.println(" –ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ —Å—Ç–∞–≤–∫–∏: " + percentFormat.format(MIN_RATE) + "% - " + 
                             percentFormat.format(MAX_RATE) + "%");
            System.out.println("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫—Ä–µ–¥–∏—Ç–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: " + percentFormat.format(MAX_PAYMENT_RATIO) + "%");
            System.out.println(" –†–∞—Å—á–µ—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥—è—Ç—Å—è –≤ –º–∞–Ω–∞—Ç–∞—Ö (AZN)");
            System.out.println("\n –ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã: –¢–æ–ª—å–∫–æ 10% –¥–æ—Ö–æ–¥–∞ –Ω–∞ –∫—Ä–µ–¥–∏—Ç, 90% –æ—Å—Ç–∞–µ—Ç—Å—è –≤–∞–º!");
            
           
            int numBorrowers;
            while (true) {
                try {
                    System.out.print("\n–°–∫–æ–ª—å–∫–æ –∑–∞–µ–º—â–∏–∫–æ–≤ –±—É–¥–µ—Ç? (1-5): ");
                    numBorrowers = Integer.parseInt(scanner.nextLine().trim());
                    if (numBorrowers >= 1 && numBorrowers <= 5) {
                        break;
                    }
                    System.out.println(" –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–µ–º—â–∏–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 5!");
                } catch (NumberFormatException e) {
                    System.out.println(" –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!");
                }
            }
            
           
            for (int i = 0; i < numBorrowers; i++) {
                System.out.println("\n" + "=".repeat(20) + " –ó–ê–ï–ú–©–ò–ö " + (i+1) + " " + "=".repeat(20));
                Borrower borrower = inputBorrowerData();
                if (borrower == null) {
                    return; 
                }
            }
            
            
            if (!checkTotalIncomeRequirement()) {
                return;
            }
            
            
            LoanParams loanParams = inputLoanParameters();
            if (loanParams == null) {
                return; 
            }
            
            
            double monthlyPayment = calculateMonthlyPayment(
                loanParams.amount, loanParams.rate, loanParams.months);
            
            List<Payment> schedule = generatePaymentSchedule(
                loanParams.amount, loanParams.rate, loanParams.months);
            
            AffordabilityAnalysis analysis = analyzeAffordability(monthlyPayment);
            
            
            clearScreen();
            printHeader("–ö–†–ï–î–ò–¢ –û–î–û–ë–†–ï–ù! –†–ï–ó–£–õ–¨–¢–ê–¢–´ –†–ê–°–ß–ï–¢–ê");
            
            System.out.println("\n –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú! –í–ê–® –ö–†–ï–î–ò–¢ –û–î–û–ë–†–ï–ù!");
            System.out.println(" –ü–ê–†–ê–ú–ï–¢–†–´ –ö–†–ï–î–ò–¢–ê:");
            System.out.println("   –°—É–º–º–∞: " + currencyFormat.format(loanParams.amount) + " AZN");
            System.out.println("   –°—Ç–∞–≤–∫–∞: " + percentFormat.format(loanParams.rate) + "% –≥–æ–¥–æ–≤—ã—Ö");
            System.out.println("   –°—Ä–æ–∫: " + loanParams.months + " –º–µ—Å—è—Ü–µ–≤ (" + 
                             percentFormat.format(loanParams.years) + " –≥–æ–¥–∞)");
            System.out.println("   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã–ª–æ –¥–æ—Å—Ç—É–ø–Ω–æ: " + 
                             currencyFormat.format(loanParams.maxAllowed) + " AZN");
            
            System.out.println("\n –§–ò–ù–ê–ù–°–û–í–´–ô –ê–ù–ê–õ–ò–ó:");
            System.out.println("   –û–±—â–∏–π –¥–æ—Ö–æ–¥ —Å–µ–º—å–∏: " + currencyFormat.format(analysis.totalIncome) + " AZN/–º–µ—Å—è—Ü");
            System.out.println("   –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂: " + currencyFormat.format(analysis.monthlyPayment) + " AZN");
            System.out.println("   –ö—Ä–µ–¥–∏—Ç–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞: " + percentFormat.format(analysis.paymentRatio) + 
                             "% (–ª–∏–º–∏—Ç: " + percentFormat.format(MAX_PAYMENT_RATIO) + "%)");
            System.out.println("   –û—Å—Ç–∞–µ—Ç—Å—è —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤: " + currencyFormat.format(analysis.remainingIncome) + 
                             " AZN (" + percentFormat.format(100 - analysis.paymentRatio) + "%)");
            System.out.println("   –°—Ç–∞—Ç—É—Å: " + analysis.status);
            System.out.println("    " + analysis.recommendation);
            
            
            printFinancialSafety(analysis);
            
            
            printFamilySummary();
            
           
            printBorrowersAnalysis(monthlyPayment);
            
            
            if (loanParams.months <= 12) {
                printPaymentTable(schedule, 1, loanParams.months); 
            } else {
                printPaymentTable(schedule, 1, 12); 
                if (loanParams.months > 24) {
                    printPaymentTable(schedule, loanParams.months - 11, 12); 
                }
            }
            
            
            double totalPayments = schedule.stream().mapToDouble(p -> p.monthlyPayment).sum();
            double totalInterest = schedule.stream().mapToDouble(p -> p.interest).sum();
            
            System.out.println("\n –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:");
            System.out.println("-".repeat(55));
            System.out.println("–û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–ø–ª–∞—Ç: " + currencyFormat.format(totalPayments) + " AZN");
            System.out.println("–ü–µ—Ä–µ–ø–ª–∞—Ç–∞ –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º: " + currencyFormat.format(totalInterest) + " AZN");
            System.out.println("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–µ—Ä–µ–ø–ª–∞—Ç—ã: " + 
                             percentFormat.format((totalPayments / loanParams.amount - 1) * 100) + "%");
            System.out.println("–û–±—â–∞—è —ç–∫–æ–Ω–æ–º–∏—è —Å–µ–º—å–∏ –∑–∞ —Å—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞: " + 
                             currencyFormat.format(analysis.remainingIncome * loanParams.months) + " AZN");
            
            
            saveToFile(loanParams, schedule, analysis, monthlyPayment);
            
            System.out.println("\n –ö–†–ï–î–ò–¢ –£–°–ü–ï–®–ù–û –û–î–û–ë–†–ï–ù –ò –†–ê–°–°–ß–ò–¢–ê–ù!");
            System.out.println(" –ü–æ–º–Ω–∏—Ç–µ: —É –≤–∞—Å –æ—Å—Ç–∞–µ—Ç—Å—è " + 
                             percentFormat.format(100 - analysis.paymentRatio) + "% –¥–æ—Ö–æ–¥–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤!");
            System.out.println("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...");
            scanner.nextLine();
            
        } catch (Exception e) {
            System.out.println("\n –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: " + e.getMessage());
            System.out.println("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –∑–∞–Ω–æ–≤–æ.");
            System.out.println("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...");
            scanner.nextLine();
        } finally {
            scanner.close();
        }
    }
    
   
    public static void main(String[] args) {
        LoanCalculator calculator = new LoanCalculator();
        calculator.run();
    }
}